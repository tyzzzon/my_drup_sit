<?php
/**
 * Implements hook_field_info().
 */
function flickr_pics_field_info() {
  return array(
    'flickr_pics_field' => array(
      'label' => t('Pictures criteria'),
      'description' => t("This field is for criteria of pictures on Flickr."),
      'settings' => array('allowed_values' => array(), 'allowed_values_function' => ''),
      'default_widget' => 'flickr_pics',
      'default_formatter' => 'flickr_pics',
      'property_type' => 'flickr_pics',
    ),
  );
};

/**
 * Implements hook_field_validate().
 */
function flickr_pics_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors){
  if ($field['type'] == 'flickr_pics_field') {
    drupal_set_message(t('Everything is ok'));
  }
};


/**
 * Implements hook_field_is_empty().
 */
function flickr_pics_field_is_empty($item, $field){
  if ($field['type'] == 'flickr_pics_field') {
    return empty($item['flickr_pic_tags']) &&
    empty($item['flickr_pic_create_date']);
  }
};

/**
 * Implements hook_field_widget_info().
 */
function flickr_pics_field_widget_info(){
  return array(
    'flickr_pics_field' => array(
      'label' => t('Date and tags field'),
      'field types' => array('flickr_pics_field'),
    ),
  );
};

/**
 * Implements hook_field_widget_form().
 */
function flickr_pics_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element){
  switch ($instance['widget']['type']) {

    // Compound field for video urls and their preview.
    case 'flickr_pics_field':

      // The fields to be rendered.
      $fields = array(
        'flickr_pic_create_date' => t('Create date'),
        'flickr_pic_tags' => t('Tags'),
      );

      // Loop through each field and create the appropriate widget.
      foreach ($fields as $key => $label) {
        switch($key) {
          case 'flickr_pic_create_date':
            $element[$key] = array(
              '#type' => 'date_popup',
              '#title' => $label,
              '#default_value' => isset($items[$delta][$key]) ? $items[$delta][$key] : '',
              '#date_format' => 'd/m/Y'
            );
            break;
          case 'flickr_pic_tags':
            $element[$key] = array(
              '#type' => 'textfield',
              '#title' => $label,
              '#default_value' => isset($items[$delta][$key]) ? $items[$delta][$key] : '',
            );
            break;
          default:
            break;
        }
      }
      break;
  }

  return $element;
};

/**
 * Implements hook_field_formatter_info().
 */
function flickr_pics_field_formatter_info(){
  return array(
    'flickr_pics_field' => array(
      'label' => t('Date and tags field'),
      'field types' => array('flickr_pics_field'),
    ),
  );
};

/**
 * Implements hook_field_formatter_view().
 */
function flickr_pics_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display){
  $element = array();
  $node = menu_get_object();

  $flickr_api_key = variable_get('flickr_api_key');
  $phpFlickr_path = libraries_get_path('phpFlickr').'/phpFlickr.php';
  require_once ($phpFlickr_path);
  $php_flickr = new phpFlickr($flickr_api_key);

    if (!empty($node)) {
      switch ($display['type']) {
        case 'flickr_pics_field':
          foreach ($items as $key => $item) {
            $photo_array = $php_flickr->photos_search(array(
              'api_key' => $php_flickr->api_key,
              'user_id' => '137868270@N03',
              'tags' => $item['flickr_pic_tags'],
              'min_upload_date' => $item['flickr_pic_create_date'],
              'max_upload_date' => substr($item['flickr_pic_create_date'], 0, -8) . '23:59:59'
            ))['photo'];
            if (!empty($photo_array)) {
              $element[$key]['#theme'] = 'flickr_pics';
              $element[$key]['#date'] = substr($item['flickr_pic_create_date'], 0, -8);
              $element[$key]['#tags'] = $item['flickr_pic_tags'];
              $element[$key]['#photo_array'] = $photo_array;
            }
            else{
              drupal_set_message('There is no photos with tags: '.$item['flickr_pic_tags']);
            }
          }
        break;
    }
  }
  $flickr_pics_js_path = drupal_get_path('module', 'flickr_pics');
  drupal_add_js($flickr_pics_js_path.'/js/flickr_pics.js');
  $ad_gallery_css_path = libraries_get_path('ADGallery').'/jquery.ad-gallery.css';
  drupal_add_css($ad_gallery_css_path);
  $ad_gallery_js_path = libraries_get_path('ADGallery').'/jquery.ad-gallery.js';
  drupal_add_js($ad_gallery_js_path);

  return $element;
};

/**
 * Implements hook_theme()
 */
function flickr_pics_theme($existing, $type, $theme, $path) {
  return array(
    'flickr_pics' => array(
      'template' => 'flickr_pics',
      'variables' => array(
        'date' => NULL,
        'tags' => NULL,
        'photo_array' => NULL,
        'photos' => NULL
      ),
    ),
  );
}

function template_preprocess_flickr_pics(&$variables) {
  if (!empty($variables['date'])) {
    $variables['date'] = 'Create date: '.$variables['date'].'<br>';
  }
  if (!empty($variables['tags'])) {
    $variables['tags'] = 'Tags: '.$variables['tags'].'<br>';
  }
  if (!empty($variables['photo_array'])){
    $photo_links = array();
    foreach($variables['photo_array'] as $photo){
      $photo_links[] = l(theme('image', array('path' => 'https://farm'.$photo['farm'].'.staticflickr.com/'.$photo['server'].'/'.$photo['id'].'_'.$photo['secret'].'_m.jpg',
        'attributes' => array('class' => 'image0', 'style' => 'opacity: 0.7;'))),
        'https://farm'.$photo['farm'].'.staticflickr.com/'.$photo['server'].'/'.$photo['id'].'_'.$photo['secret'].'.jpg',
        array('html' => TRUE));
    }
    $variables['photos'] = theme('item_list', array('items' => $photo_links, 'attributes' => array('class' => 'ad-thumb-list', 'style' => 'width: 1353px;'),
      'title' => '', 'type' => 'ul'));
  }
}